version: '3.8'

# Production-specific configuration
# This file extends docker-compose.yml with production settings

services:
  # PostgreSQL Database - Production config
  postgres:
    restart: always
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./infrastructure/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    environment:
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_USER: ${POSTGRES_USER:-notalabel}
      POSTGRES_DB: ${POSTGRES_DB:-notalabel}
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache - Production config
  redis:
    restart: always
    command: redis-server --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # API Gateway - Production config
  api-gateway:
    restart: always
    environment:
      NODE_ENV: production
      LOG_LEVEL: info
      CORS_ORIGIN: https://not-a-label.art,https://www.not-a-label.art
      RATE_LIMIT_WINDOW: 15
      RATE_LIMIT_MAX: 100
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # User Service - Production config
  user-service:
    restart: always
    environment:
      NODE_ENV: production
      LOG_LEVEL: info
      DATABASE_URL: postgresql://${POSTGRES_USER:-notalabel}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-notalabel}?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Music Service - Production config (if exists)
  music-service:
    restart: always
    environment:
      NODE_ENV: production
      LOG_LEVEL: info
      DATABASE_URL: postgresql://${POSTGRES_USER:-notalabel}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-notalabel}?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
    volumes:
      - music_uploads:/app/uploads
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # AI Service - Production config
  ai-service:
    restart: always
    environment:
      NODE_ENV: production
      LOG_LEVEL: info
      DATABASE_URL: postgresql://${POSTGRES_USER:-notalabel}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-notalabel}?sslmode=disable
      REDIS_URL: redis://:${REDIS_PASSWORD}@redis:6379
      MAX_CONCURRENT_REQUESTS: 10
      REQUEST_TIMEOUT: 30000
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Web Frontend - Production config
  web:
    restart: always
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: https://api.not-a-label.art
      NEXTAUTH_URL: https://not-a-label.art
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx - Production config
  nginx:
    restart: always
    volumes:
      - ./infrastructure/nginx/nginx.production.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl:ro
      - nginx_cache:/var/cache/nginx
      - nginx_logs:/var/log/nginx
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Backup service
  backup:
    image: postgres:16-alpine
    environment:
      PGPASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./backups:/backups
    command: >
      sh -c "while true; do
        pg_dump -h postgres -U ${POSTGRES_USER:-notalabel} ${POSTGRES_DB:-notalabel} | gzip > /backups/backup-\$$(date +%Y%m%d-%H%M%S).sql.gz;
        find /backups -name 'backup-*.sql.gz' -mtime +7 -delete;
        sleep 86400;
      done"
    depends_on:
      - postgres
    restart: always

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  music_uploads:
    driver: local
  nginx_cache:
    driver: local
  nginx_logs:
    driver: local