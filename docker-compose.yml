version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: notalabel
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-notalabel123}
      POSTGRES_DB: notalabel
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U notalabel"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway
  api-gateway:
    build:
      context: .
      dockerfile: services/api-gateway/Dockerfile
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: production
      PORT: 3001
      JWT_SECRET: ${JWT_SECRET}
      USER_SERVICE_URL: http://user-service:3002
      MUSIC_SERVICE_URL: http://music-service:3003
      AI_SERVICE_URL: http://ai-service:3004
      ANALYTICS_SERVICE_URL: http://analytics-service:3005
      DISTRIBUTION_SERVICE_URL: http://distribution-service:3006
    depends_on:
      - redis
    restart: unless-stopped

  # User Service
  user-service:
    build:
      context: .
      dockerfile: services/user-service/Dockerfile
    environment:
      NODE_ENV: production
      PORT: 3002
      DATABASE_URL: postgresql://notalabel:${POSTGRES_PASSWORD:-notalabel123}@postgres:5432/notalabel
      JWT_SECRET: ${JWT_SECRET}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Music Service
  music-service:
    build:
      context: .
      dockerfile: services/music-service/Dockerfile
    environment:
      NODE_ENV: production
      PORT: 3003
      DATABASE_URL: postgresql://notalabel:${POSTGRES_PASSWORD:-notalabel123}@postgres:5432/notalabel
      AWS_ACCESS_KEY_ID: ${AWS_ACCESS_KEY_ID}
      AWS_SECRET_ACCESS_KEY: ${AWS_SECRET_ACCESS_KEY}
      AWS_BUCKET: ${AWS_BUCKET}
      AWS_REGION: ${AWS_REGION}
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # AI Service
  ai-service:
    build:
      context: .
      dockerfile: services/ai-service/Dockerfile
    environment:
      NODE_ENV: production
      PORT: 3004
      DATABASE_URL: postgresql://notalabel:${POSTGRES_PASSWORD:-notalabel123}@postgres:5432/notalabel
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      ANTHROPIC_API_KEY: ${ANTHROPIC_API_KEY}
      REDIS_URL: redis://redis:6379
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # Web Frontend
  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      NEXTAUTH_URL: ${NEXTAUTH_URL:-http://localhost:3000}
      NEXTAUTH_SECRET: ${NEXTAUTH_SECRET}
      API_URL: http://api-gateway:3001
    depends_on:
      - api-gateway
    restart: unless-stopped

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./infrastructure/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./infrastructure/nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - web
      - api-gateway
    restart: unless-stopped

volumes:
  postgres_data:
  redis_data: